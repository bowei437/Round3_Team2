# coding: utf-8

"""
    Team 2 Pathfinding API

    Calculates minimum path between points depending on user generated map input.

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Problem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, version=None, problem_id=None, robots=None, goal=None, boundary=None, obstacles=None):
        """
        Problem - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'version': 'int',
            'problem_id': 'int',
            'robots': 'list[Robot]',
            'goal': 'Goal',
            'boundary': 'Boundary',
            'obstacles': 'list[Obstacle]'
        }

        self.attribute_map = {
            'version': 'version',
            'problem_id': 'problem_id',
            'robots': 'robots',
            'goal': 'goal',
            'boundary': 'boundary',
            'obstacles': 'obstacles'
        }

        self._version = version
        self._problem_id = problem_id
        self._robots = robots
        self._goal = goal
        self._boundary = boundary
        self._obstacles = obstacles

    @property
    def version(self):
        """
        Gets the version of this Problem.

        :return: The version of this Problem.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this Problem.

        :param version: The version of this Problem.
        :type: int
        """

        self._version = version

    @property
    def problem_id(self):
        """
        Gets the problem_id of this Problem.

        :return: The problem_id of this Problem.
        :rtype: int
        """
        return self._problem_id

    @problem_id.setter
    def problem_id(self, problem_id):
        """
        Sets the problem_id of this Problem.

        :param problem_id: The problem_id of this Problem.
        :type: int
        """

        self._problem_id = problem_id

    @property
    def robots(self):
        """
        Gets the robots of this Problem.
        The list of robots for the problem

        :return: The robots of this Problem.
        :rtype: list[Robot]
        """
        return self._robots

    @robots.setter
    def robots(self, robots):
        """
        Sets the robots of this Problem.
        The list of robots for the problem

        :param robots: The robots of this Problem.
        :type: list[Robot]
        """

        self._robots = robots

    @property
    def goal(self):
        """
        Gets the goal of this Problem.

        :return: The goal of this Problem.
        :rtype: Goal
        """
        return self._goal

    @goal.setter
    def goal(self, goal):
        """
        Sets the goal of this Problem.

        :param goal: The goal of this Problem.
        :type: Goal
        """

        self._goal = goal

    @property
    def boundary(self):
        """
        Gets the boundary of this Problem.

        :return: The boundary of this Problem.
        :rtype: Boundary
        """
        return self._boundary

    @boundary.setter
    def boundary(self, boundary):
        """
        Sets the boundary of this Problem.

        :param boundary: The boundary of this Problem.
        :type: Boundary
        """

        self._boundary = boundary

    @property
    def obstacles(self):
        """
        Gets the obstacles of this Problem.

        :return: The obstacles of this Problem.
        :rtype: list[Obstacle]
        """
        return self._obstacles

    @obstacles.setter
    def obstacles(self, obstacles):
        """
        Sets the obstacles of this Problem.

        :param obstacles: The obstacles of this Problem.
        :type: list[Obstacle]
        """

        self._obstacles = obstacles

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Problem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
