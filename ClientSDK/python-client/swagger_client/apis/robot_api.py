# coding: utf-8

"""
    Team 2 Pathfinding API

    Calculates minimum path between points depending on user generated map input.

    OpenAPI spec version: 3.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class RobotApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def add_robot(self, problem_id, version, robot, **kwargs):
        """
        Add a new robot to the list
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_robot(problem_id, version, robot, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int problem_id: The id of the problem being manipulated (required)
        :param int version: The version of the obstacle to be updated. (required)
        :param Robot robot: Obstacle object that needs to be added to the list. (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_robot_with_http_info(problem_id, version, robot, **kwargs)
        else:
            (data) = self.add_robot_with_http_info(problem_id, version, robot, **kwargs)
            return data

    def add_robot_with_http_info(self, problem_id, version, robot, **kwargs):
        """
        Add a new robot to the list
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_robot_with_http_info(problem_id, version, robot, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int problem_id: The id of the problem being manipulated (required)
        :param int version: The version of the obstacle to be updated. (required)
        :param Robot robot: Obstacle object that needs to be added to the list. (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['problem_id', 'version', 'robot']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_robot" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'problem_id' is set
        if ('problem_id' not in params) or (params['problem_id'] is None):
            raise ValueError("Missing the required parameter `problem_id` when calling `add_robot`")
        # verify the required parameter 'version' is set
        if ('version' not in params) or (params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `add_robot`")
        # verify the required parameter 'robot' is set
        if ('robot' not in params) or (params['robot'] is None):
            raise ValueError("Missing the required parameter `robot` when calling `add_robot`")


        collection_formats = {}

        resource_path = '/id&#x3D;{problem_id}/Robot/ver&#x3D;{version}/'.replace('{format}', 'json')
        path_params = {}
        if 'problem_id' in params:
            path_params['problem_id'] = params['problem_id']
        if 'version' in params:
            path_params['version'] = params['version']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'robot' in params:
            body_params = params['robot']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='int',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_robot(self, problem_id, robot_id, version, **kwargs):
        """
        Delete Robot
        This removes the robot by the given ID
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_robot(problem_id, robot_id, version, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int problem_id: The id of the problem being manipulated (required)
        :param int robot_id: The ID of the Obstacle that needs to be deleted. (required)
        :param int version: The version of the obstacle to be updated. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_robot_with_http_info(problem_id, robot_id, version, **kwargs)
        else:
            (data) = self.delete_robot_with_http_info(problem_id, robot_id, version, **kwargs)
            return data

    def delete_robot_with_http_info(self, problem_id, robot_id, version, **kwargs):
        """
        Delete Robot
        This removes the robot by the given ID
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_robot_with_http_info(problem_id, robot_id, version, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int problem_id: The id of the problem being manipulated (required)
        :param int robot_id: The ID of the Obstacle that needs to be deleted. (required)
        :param int version: The version of the obstacle to be updated. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['problem_id', 'robot_id', 'version']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_robot" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'problem_id' is set
        if ('problem_id' not in params) or (params['problem_id'] is None):
            raise ValueError("Missing the required parameter `problem_id` when calling `delete_robot`")
        # verify the required parameter 'robot_id' is set
        if ('robot_id' not in params) or (params['robot_id'] is None):
            raise ValueError("Missing the required parameter `robot_id` when calling `delete_robot`")
        # verify the required parameter 'version' is set
        if ('version' not in params) or (params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `delete_robot`")


        collection_formats = {}

        resource_path = '/id&#x3D;{problem_id}/Robot/rid&#x3D;{robot_id}/ver&#x3D;{version}/'.replace('{format}', 'json')
        path_params = {}
        if 'problem_id' in params:
            path_params['problem_id'] = params['problem_id']
        if 'robot_id' in params:
            path_params['robot_id'] = params['robot_id']
        if 'version' in params:
            path_params['version'] = params['version']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_robot(self, problem_id, robot_id, **kwargs):
        """
        Get a robot by the ID
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_robot(problem_id, robot_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int problem_id: The id of the problem being manipulated (required)
        :param int robot_id: Robot object that needs to be updated. (required)
        :return: Robot
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_robot_with_http_info(problem_id, robot_id, **kwargs)
        else:
            (data) = self.get_robot_with_http_info(problem_id, robot_id, **kwargs)
            return data

    def get_robot_with_http_info(self, problem_id, robot_id, **kwargs):
        """
        Get a robot by the ID
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_robot_with_http_info(problem_id, robot_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int problem_id: The id of the problem being manipulated (required)
        :param int robot_id: Robot object that needs to be updated. (required)
        :return: Robot
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['problem_id', 'robot_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_robot" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'problem_id' is set
        if ('problem_id' not in params) or (params['problem_id'] is None):
            raise ValueError("Missing the required parameter `problem_id` when calling `get_robot`")
        # verify the required parameter 'robot_id' is set
        if ('robot_id' not in params) or (params['robot_id'] is None):
            raise ValueError("Missing the required parameter `robot_id` when calling `get_robot`")


        collection_formats = {}

        resource_path = '/id&#x3D;{problem_id}/Robot/rid&#x3D;{robot_id}'.replace('{format}', 'json')
        path_params = {}
        if 'problem_id' in params:
            path_params['problem_id'] = params['problem_id']
        if 'robot_id' in params:
            path_params['robot_id'] = params['robot_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Robot',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_robots(self, problem_id, **kwargs):
        """
        Robot
        Returns a description of the robots, including the current location 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_robots(problem_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int problem_id: The id of the problem being manipulated (required)
        :return: list[Robot]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_robots_with_http_info(problem_id, **kwargs)
        else:
            (data) = self.get_robots_with_http_info(problem_id, **kwargs)
            return data

    def get_robots_with_http_info(self, problem_id, **kwargs):
        """
        Robot
        Returns a description of the robots, including the current location 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_robots_with_http_info(problem_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int problem_id: The id of the problem being manipulated (required)
        :return: list[Robot]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['problem_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_robots" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'problem_id' is set
        if ('problem_id' not in params) or (params['problem_id'] is None):
            raise ValueError("Missing the required parameter `problem_id` when calling `get_robots`")


        collection_formats = {}

        resource_path = '/id&#x3D;{problem_id}/Robot'.replace('{format}', 'json')
        path_params = {}
        if 'problem_id' in params:
            path_params['problem_id'] = params['problem_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Robot]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_robot(self, problem_id, version, robot, robot_id, **kwargs):
        """
        Update the existing robot value
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_robot(problem_id, version, robot, robot_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int problem_id: The id of the problem being manipulated (required)
        :param int version: The version of the obstacle to be updated. (required)
        :param Robot robot: Robot object that needs to be updated. (required)
        :param int robot_id: Robot object that needs to be updated. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_robot_with_http_info(problem_id, version, robot, robot_id, **kwargs)
        else:
            (data) = self.update_robot_with_http_info(problem_id, version, robot, robot_id, **kwargs)
            return data

    def update_robot_with_http_info(self, problem_id, version, robot, robot_id, **kwargs):
        """
        Update the existing robot value
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_robot_with_http_info(problem_id, version, robot, robot_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int problem_id: The id of the problem being manipulated (required)
        :param int version: The version of the obstacle to be updated. (required)
        :param Robot robot: Robot object that needs to be updated. (required)
        :param int robot_id: Robot object that needs to be updated. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['problem_id', 'version', 'robot', 'robot_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_robot" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'problem_id' is set
        if ('problem_id' not in params) or (params['problem_id'] is None):
            raise ValueError("Missing the required parameter `problem_id` when calling `update_robot`")
        # verify the required parameter 'version' is set
        if ('version' not in params) or (params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `update_robot`")
        # verify the required parameter 'robot' is set
        if ('robot' not in params) or (params['robot'] is None):
            raise ValueError("Missing the required parameter `robot` when calling `update_robot`")
        # verify the required parameter 'robot_id' is set
        if ('robot_id' not in params) or (params['robot_id'] is None):
            raise ValueError("Missing the required parameter `robot_id` when calling `update_robot`")


        collection_formats = {}

        resource_path = '/id&#x3D;{problem_id}/Robot/rid&#x3D;{robot_id}/ver&#x3D;{version}/'.replace('{format}', 'json')
        path_params = {}
        if 'problem_id' in params:
            path_params['problem_id'] = params['problem_id']
        if 'version' in params:
            path_params['version'] = params['version']
        if 'robot_id' in params:
            path_params['robot_id'] = params['robot_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'robot' in params:
            body_params = params['robot']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'application/xml'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'application/xml'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
