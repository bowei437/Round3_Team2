# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.shape import Shape
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Obstacle(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, obstacle_id: int=None, obstacle_info: Shape=None):
        """
        Obstacle - a model defined in Swagger

        :param obstacle_id: The obstacle_id of this Obstacle.
        :type obstacle_id: int
        :param obstacle_info: The obstacle_info of this Obstacle.
        :type obstacle_info: Shape
        """
        self.swagger_types = {
            'obstacle_id': int,
            'obstacle_info': Shape
        }

        self.attribute_map = {
            'obstacle_id': 'obstacle_id',
            'obstacle_info': 'obstacle_info'
        }

        self._obstacle_id = obstacle_id
        self._obstacle_info = obstacle_info

    @classmethod
    def from_dict(cls, dikt) -> 'Obstacle':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Obstacle of this Obstacle.
        :rtype: Obstacle
        """
        return deserialize_model(dikt, cls)

    @property
    def obstacle_id(self) -> int:
        """
        Gets the obstacle_id of this Obstacle.
        Unique identifier representing a specific obstacle in the list.

        :return: The obstacle_id of this Obstacle.
        :rtype: int
        """
        return self._obstacle_id

    @obstacle_id.setter
    def obstacle_id(self, obstacle_id: int):
        """
        Sets the obstacle_id of this Obstacle.
        Unique identifier representing a specific obstacle in the list.

        :param obstacle_id: The obstacle_id of this Obstacle.
        :type obstacle_id: int
        """
        if obstacle_id is not None and obstacle_id < 0:
            raise ValueError("Invalid value for `obstacle_id`, must be a value greater than or equal to `0`")

        self._obstacle_id = obstacle_id

    @property
    def obstacle_info(self) -> Shape:
        """
        Gets the obstacle_info of this Obstacle.

        :return: The obstacle_info of this Obstacle.
        :rtype: Shape
        """
        return self._obstacle_info

    @obstacle_info.setter
    def obstacle_info(self, obstacle_info: Shape):
        """
        Sets the obstacle_info of this Obstacle.

        :param obstacle_info: The obstacle_info of this Obstacle.
        :type obstacle_info: Shape
        """

        self._obstacle_info = obstacle_info

