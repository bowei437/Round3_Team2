# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.coordinate import Coordinate
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Path(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, path_cost: float=1.0, coordinates: List[Coordinate]=None):
        """
        Path - a model defined in Swagger

        :param path_cost: The path_cost of this Path.
        :type path_cost: float
        :param coordinates: The coordinates of this Path.
        :type coordinates: List[Coordinate]
        """
        self.swagger_types = {
            'path_cost': float,
            'coordinates': List[Coordinate]
        }

        self.attribute_map = {
            'path_cost': 'path_cost',
            'coordinates': 'coordinates'
        }

        self._path_cost = path_cost
        self._coordinates = coordinates

    @classmethod
    def from_dict(cls, dikt) -> 'Path':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Path of this Path.
        :rtype: Path
        """
        return deserialize_model(dikt, cls)

    @property
    def path_cost(self) -> float:
        """
        Gets the path_cost of this Path.
        The total cost to travel the path

        :return: The path_cost of this Path.
        :rtype: float
        """
        return self._path_cost

    @path_cost.setter
    def path_cost(self, path_cost: float):
        """
        Sets the path_cost of this Path.
        The total cost to travel the path

        :param path_cost: The path_cost of this Path.
        :type path_cost: float
        """
        if path_cost is None:
            raise ValueError("Invalid value for `path_cost`, must not be `None`")

        self._path_cost = path_cost

    @property
    def coordinates(self) -> List[Coordinate]:
        """
        Gets the coordinates of this Path.
        The path travelled

        :return: The coordinates of this Path.
        :rtype: List[Coordinate]
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates: List[Coordinate]):
        """
        Sets the coordinates of this Path.
        The path travelled

        :param coordinates: The coordinates of this Path.
        :type coordinates: List[Coordinate]
        """

        self._coordinates = coordinates

