# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.boundary import Boundary
from swagger_server.models.goal import Goal
from swagger_server.models.obstacle import Obstacle
from swagger_server.models.path import Path
from swagger_server.models.problem_regions import ProblemRegions
from swagger_server.models.robot import Robot
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Problem(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, problem_id: int=None, robots: List[Robot]=None, goal: Goal=None, boundary: Boundary=None, obstacles: List[Obstacle]=None, path: Path=None, regions: ProblemRegions=None):
        """
        Problem - a model defined in Swagger

        :param problem_id: The problem_id of this Problem.
        :type problem_id: int
        :param robots: The robots of this Problem.
        :type robots: List[Robot]
        :param goal: The goal of this Problem.
        :type goal: Goal
        :param boundary: The boundary of this Problem.
        :type boundary: Boundary
        :param obstacles: The obstacles of this Problem.
        :type obstacles: List[Obstacle]
        :param path: The path of this Problem.
        :type path: Path
        :param regions: The regions of this Problem.
        :type regions: ProblemRegions
        """
        self.swagger_types = {
            'problem_id': int,
            'robots': List[Robot],
            'goal': Goal,
            'boundary': Boundary,
            'obstacles': List[Obstacle],
            'path': Path,
            'regions': ProblemRegions
        }

        self.attribute_map = {
            'problem_id': 'problem_id',
            'robots': 'robots',
            'goal': 'goal',
            'boundary': 'boundary',
            'obstacles': 'obstacles',
            'path': 'path',
            'regions': 'regions'
        }

        self._problem_id = problem_id
        self._robots = robots
        self._goal = goal
        self._boundary = boundary
        self._obstacles = obstacles
        self._path = path
        self._regions = regions

    @classmethod
    def from_dict(cls, dikt) -> 'Problem':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Problem of this Problem.
        :rtype: Problem
        """
        return deserialize_model(dikt, cls)

    @property
    def problem_id(self) -> int:
        """
        Gets the problem_id of this Problem.

        :return: The problem_id of this Problem.
        :rtype: int
        """
        return self._problem_id

    @problem_id.setter
    def problem_id(self, problem_id: int):
        """
        Sets the problem_id of this Problem.

        :param problem_id: The problem_id of this Problem.
        :type problem_id: int
        """
        if problem_id is not None and problem_id < 0:
            raise ValueError("Invalid value for `problem_id`, must be a value greater than or equal to `0`")

        self._problem_id = problem_id

    @property
    def robots(self) -> List[Robot]:
        """
        Gets the robots of this Problem.
        The list of robots for the problem

        :return: The robots of this Problem.
        :rtype: List[Robot]
        """
        return self._robots

    @robots.setter
    def robots(self, robots: List[Robot]):
        """
        Sets the robots of this Problem.
        The list of robots for the problem

        :param robots: The robots of this Problem.
        :type robots: List[Robot]
        """
        if robots is None:
            raise ValueError("Invalid value for `robots`, must not be `None`")

        self._robots = robots

    @property
    def goal(self) -> Goal:
        """
        Gets the goal of this Problem.

        :return: The goal of this Problem.
        :rtype: Goal
        """
        return self._goal

    @goal.setter
    def goal(self, goal: Goal):
        """
        Sets the goal of this Problem.

        :param goal: The goal of this Problem.
        :type goal: Goal
        """
        if goal is None:
            raise ValueError("Invalid value for `goal`, must not be `None`")

        self._goal = goal

    @property
    def boundary(self) -> Boundary:
        """
        Gets the boundary of this Problem.

        :return: The boundary of this Problem.
        :rtype: Boundary
        """
        return self._boundary

    @boundary.setter
    def boundary(self, boundary: Boundary):
        """
        Sets the boundary of this Problem.

        :param boundary: The boundary of this Problem.
        :type boundary: Boundary
        """
        if boundary is None:
            raise ValueError("Invalid value for `boundary`, must not be `None`")

        self._boundary = boundary

    @property
    def obstacles(self) -> List[Obstacle]:
        """
        Gets the obstacles of this Problem.

        :return: The obstacles of this Problem.
        :rtype: List[Obstacle]
        """
        return self._obstacles

    @obstacles.setter
    def obstacles(self, obstacles: List[Obstacle]):
        """
        Sets the obstacles of this Problem.

        :param obstacles: The obstacles of this Problem.
        :type obstacles: List[Obstacle]
        """

        self._obstacles = obstacles

    @property
    def path(self) -> Path:
        """
        Gets the path of this Problem.

        :return: The path of this Problem.
        :rtype: Path
        """
        return self._path

    @path.setter
    def path(self, path: Path):
        """
        Sets the path of this Problem.

        :param path: The path of this Problem.
        :type path: Path
        """

        self._path = path

    @property
    def regions(self) -> ProblemRegions:
        """
        Gets the regions of this Problem.

        :return: The regions of this Problem.
        :rtype: ProblemRegions
        """
        return self._regions

    @regions.setter
    def regions(self, regions: ProblemRegions):
        """
        Sets the regions of this Problem.

        :param regions: The regions of this Problem.
        :type regions: ProblemRegions
        """

        self._regions = regions

