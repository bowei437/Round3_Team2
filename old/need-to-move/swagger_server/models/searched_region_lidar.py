# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.coordinate import Coordinate
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class SearchedRegionLIDAR(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id: int=None, points: List[Coordinate]=None, radius: float=None):
        """
        SearchedRegionLIDAR - a model defined in Swagger

        :param id: The id of this SearchedRegionLIDAR.
        :type id: int
        :param points: The points of this SearchedRegionLIDAR.
        :type points: List[Coordinate]
        :param radius: The radius of this SearchedRegionLIDAR.
        :type radius: float
        """
        self.swagger_types = {
            'id': int,
            'points': List[Coordinate],
            'radius': float
        }

        self.attribute_map = {
            'id': 'id',
            'points': 'points',
            'radius': 'radius'
        }

        self._id = id
        self._points = points
        self._radius = radius

    @classmethod
    def from_dict(cls, dikt) -> 'SearchedRegionLIDAR':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The searchedRegionLIDAR of this SearchedRegionLIDAR.
        :rtype: SearchedRegionLIDAR
        """
        return deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """
        Gets the id of this SearchedRegionLIDAR.

        :return: The id of this SearchedRegionLIDAR.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """
        Sets the id of this SearchedRegionLIDAR.

        :param id: The id of this SearchedRegionLIDAR.
        :type id: int
        """
        if id is not None and id < 0:
            raise ValueError("Invalid value for `id`, must be a value greater than or equal to `0`")

        self._id = id

    @property
    def points(self) -> List[Coordinate]:
        """
        Gets the points of this SearchedRegionLIDAR.

        :return: The points of this SearchedRegionLIDAR.
        :rtype: List[Coordinate]
        """
        return self._points

    @points.setter
    def points(self, points: List[Coordinate]):
        """
        Sets the points of this SearchedRegionLIDAR.

        :param points: The points of this SearchedRegionLIDAR.
        :type points: List[Coordinate]
        """
        if points is None:
            raise ValueError("Invalid value for `points`, must not be `None`")

        self._points = points

    @property
    def radius(self) -> float:
        """
        Gets the radius of this SearchedRegionLIDAR.

        :return: The radius of this SearchedRegionLIDAR.
        :rtype: float
        """
        return self._radius

    @radius.setter
    def radius(self, radius: float):
        """
        Sets the radius of this SearchedRegionLIDAR.

        :param radius: The radius of this SearchedRegionLIDAR.
        :type radius: float
        """
        if radius is None:
            raise ValueError("Invalid value for `radius`, must not be `None`")
        if radius is not None and radius < 0:
            raise ValueError("Invalid value for `radius`, must be a value greater than or equal to `0`")

        self._radius = radius

